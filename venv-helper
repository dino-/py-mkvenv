#! /usr/bin/env python3

import argparse
import os
import subprocess


def parseArgs(defaultVenvDir):
  parser = argparse.ArgumentParser(
    description = 'Set up a Python virtual environment directory in a new or existing project using `python -m venv`. It will also create a .gitignore file if none is present.',
    epilog = 'v1.0  Dino Morelli <dino@ui3.info>',
    formatter_class = argparse.ArgumentDefaultsHelpFormatter
    )

  parser.add_argument(
    'projectDir',
    metavar = 'DIR',
    nargs = '?',
    default = '.',
    help = 'Project directory, setting this will create a new project'
    )

  parser.add_argument(
    '-v', '--venv-dir',
    dest = 'venvDir',
    metavar = 'DIR',
    default = defaultVenvDir,
    help = 'Directory under the project to create the virtual environment'
    )

  return parser.parse_args()


def prepDirectory(projectDir):
  if not os.path.exists(projectDir):
    os.makedirs(projectDir)


# Execute a function after chdir to the supplied directory, restoring the
# working directory afterwards.
def withDirectory(dir, f):
  cwd = os.getcwd()

  try:
    os.chdir(dir)
    f()
  finally:
    os.chdir(cwd)


def mkVirtEnv(projectDir, venvDir):
  def f():
    subprocess.call(["python3", "-m", "venv", venvDir])
    subprocess.call([f"{venvDir}/bin/python", "-m", "pip", "install",
      "--upgrade", "pip", "setuptools", "wheel"])

  withDirectory(projectDir, f)


def mkGitignore(projectDir, venvDir):
  gitIgnoreFile = f'{projectDir}/.gitignore'

  if os.path.exists(gitIgnoreFile):
    print(f"{gitIgnoreFile} already exists, not creating")
  else:
    with open(gitIgnoreFile, "w") as f:
      f.write(f"{venvDir}\n")
    print(f"{gitIgnoreFile} created")


def printSuccessMsg(projectDir, venvDir):
  if projectDir == '.': cdLine = ''
  else: cdLine = f'$ cd {projectDir}\n'

  print(
    f"\nVirtual environment is ready for project in {projectDir}\n\n"

     "Useful commands:\n\n"

    + cdLine +
     "$ git init  # and then more git commands\n"
    f"$ . ./{venvDir}/bin/activate\n"
     "$ pip install SOME_PYTHON_PACKAGE\n"
     "$ pip freeze > requirements.txt  # Not a bad idea to put requirements.txt in source control\n"
     "$ deactivate\n"
    )


def main():
  defaultVenvDir = ".venv"

  args = parseArgs(defaultVenvDir)

  prepDirectory(args.projectDir)
  mkVirtEnv(args.projectDir, args.venvDir)
  mkGitignore(args.projectDir, args.venvDir)
  printSuccessMsg(args.projectDir, args.venvDir)


if __name__ == '__main__': main()
