#! /usr/bin/env python3

import os
import subprocess
import sys


def prepDirectory(projectDir):
  if os.path.exists(projectDir):
    sys.exit(f"ERROR: Directory {projectDir} already exists")
  else:
    os.makedirs(projectDir)
    os.chdir(projectDir)


def mkVirtEnv(venvDir):
  subprocess.call(["python3", "-m", "venv", venvDir])
  subprocess.call([f"{venvDir}/bin/python", "-m", "pip", "install",
    "--upgrade", "pip", "setuptools", "wheel"])


def mkGitignore(venvDir):
  gitIgnoreFile = '.gitignore'

  if os.path.exists(gitIgnoreFile):
    print(f"{gitIgnoreFile} already exists, not creating")
  else:
    with open(".gitignore", "w") as f:
      f.write(f"{venvDir}\n")
    print(f"{gitIgnoreFile} created")


def printSuccessMsg(projectDir, venvDir):
  print(
    f"\nVirtual environment is ready for project in {projectDir}\n\n"

     "Useful commands:\n\n"

    f"$ cd {projectDir}\n"
     "$ git init  # and then more git commands\n"
    f"$ . ./{venvDir}/bin/activate\n"
     "$ pip install SOME_PYTHON_PACKAGE\n"
     "$ pip freeze > requirements.txt  # Not a bad idea to put requirements.txt in source control\n"
     "$ deactivate\n"
    )


if __name__ == '__main__':
  venvDir = ".venv"

  if len(sys.argv) < 2:
    sys.exit("Usage: new-py PROJECT_DIR")

  projectDir = sys.argv[1]

  prepDirectory(projectDir)
  mkVirtEnv(venvDir)
  mkGitignore(venvDir)
  printSuccessMsg(projectDir, venvDir)
