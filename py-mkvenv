#! /usr/bin/env python3

"""
usage:
  py-mkvenv [-v DIR] [-R] [-G] [PROJECT_DIR]
  py-mkvenv [-h]
  py-mkvenv [--version]

Automate creation of virtual environments in Python 3 projects

positional arguments:
  PROJECT_DIR   Project directory, specifying this will create a new project
                directory and environment within it [default: .]

options:
  -h, --help    Show this help message and exit
  -G, --no-gitignore
                Suppress creation of `.gitignore` file
  -R, --no-req  Suppress installation of dependencies in `requirements.txt`
  -v DIR, --venv-dir DIR
                Directory under the project to create the virtual
                environment [default: .venv]
  --version     Show version info and exit


Creates a Python virtual environment directory in a new or existing project
using `python3 -m venv`. After the environment is created, this tool will
update `pip`, `setuptools` and `wheel`. Finally, it will detect a
`requirements.txt` file and `pip install -r` it.

This tool will also create a `.gitignore` file if none is present.

After your environment is created, don't forget to activate

  $ . ./.venv/bin/activate

If you add more packages, consider refreshing the `requirements.txt` file

  $ pip install SOME_PYTHON_PACKAGE
  $ pip freeze > requirements.txt

v1.2  Dino Morelli <dino@ui3.info>

"""

from docopt import docopt
import os
import subprocess


def prepDirectory(projectDir):
  if not os.path.exists(projectDir):
    os.makedirs(projectDir)

  # It's VERY IMPORTANT this chdir command executes. Without it, many files
  # will be created in subsequent function calls in the wrong place.
  os.chdir(projectDir)


def mkVirtEnv(venvDir, noReq):
  subprocess.call(['python3', '-m', 'venv', venvDir])
  subprocess.call(['{}/bin/python'.format(venvDir), '-m', 'pip', 'install',
    '--upgrade', 'pip', 'setuptools', 'wheel'])

  reqFile = 'requirements.txt'

  if not os.path.exists(reqFile):
    print('No {} found'.format(reqFile))
  elif noReq:
    print('Installation of requirements not desired')
  else:
    subprocess.call(['{}/bin/pip'.format(venvDir), 'install', '-r', reqFile])


def mkGitignore(venvDir, noGitignore):
  gitIgnoreFile = '.gitignore'

  if os.path.exists(gitIgnoreFile):
    print('{} already exists, not creating'.format(gitIgnoreFile))
  elif noGitignore:
    print('No {} desired, not creating'.format(gitIgnoreFile))
  else:
    with open(gitIgnoreFile, 'w') as f:
      f.write('{}\n'.format(venvDir))
    print('{} created'.format(gitIgnoreFile))


def main():
  args = docopt(__doc__, version='py-mkvenv 1.2')
  # docopt can't set default values for positional arguments (yet), fix that up here
  if args['PROJECT_DIR'] is None: args['PROJECT_DIR'] = '.'

  prepDirectory(args['PROJECT_DIR'])
  mkVirtEnv(args['--venv-dir'], args['--no-req'])
  mkGitignore(args['--venv-dir'], args['--no-gitignore'])
  print("\nVirtual environment is ready for project in {}".format(args['PROJECT_DIR']))


if __name__ == '__main__': main()
