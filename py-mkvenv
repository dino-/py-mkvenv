#! /usr/bin/env python3

import argparse
from os import (chdir, makedirs, path)
from subprocess import call
from sys import argv


version = '1.4'


def parseArgs():
  parser = argparse.ArgumentParser(
    description = 'Automate creation of virtual environments in Python 3 projects',
    formatter_class = argparse.RawDescriptionHelpFormatter,
    epilog = """
Creates a Python virtual environment directory in a new or existing project
using `python3 -m venv`. After the environment is created, this tool will
update `pip`, `setuptools` and `wheel`. Finally, it will detect a
`requirements.txt` file and `pip install -r` it.

This tool will also create a `.gitignore` file if none is present.

After your environment is created, don't forget to activate

  $ . ./.venv/bin/activate

If you add more packages, consider refreshing the `requirements.txt` file

  $ pip install SOME_PYTHON_PACKAGE
  $ pip freeze > requirements.txt

To leave the environment, deactivate

  $ deactivate

v{}  Dino Morelli <dino@ui3.info>""".format(version)
    )

  parser.add_argument(
    '-G', '--no-gitignore',
    dest = 'noGitignore',
    action = 'store_true',
    help = "Suppress creation of `.gitignore` file"
    )

  parser.add_argument(
    '-R', '--no-req',
    dest = 'noReq',
    action = 'store_true',
    help = "Suppress installation of dependencies in `requirements.txt`"
    )

  venvDefault = '.venv'
  parser.add_argument(
    '-v', '--venv-dir',
    dest = 'venvDir',
    metavar = 'DIR',
    default = venvDefault,
    help = "Directory under the project to create the virtual environment [default: {}]".format(venvDefault)
    )

  parser.add_argument(
    '--version',
    dest = 'displayVersion',
    action = 'store_true',
    help = "Show version info and exit"
    )

  projectDirDefault = '.'
  parser.add_argument(
    'projectDir',
    metavar = 'PROJECT_DIR',
    nargs = '?',
    default = projectDirDefault,
    help="Project directory, specifying this will create a new project directory and environment within it [default: {}]".format(projectDirDefault)
    )

  return parser.parse_args()


def prepDirectory(projectDir):
  if not path.exists(projectDir):
    makedirs(projectDir)

  # It's VERY IMPORTANT this chdir command executes. Without it, many files
  # will be created in subsequent function calls in the wrong place.
  chdir(projectDir)


def mkVirtEnv(venvDir, noReq):
  call(['python3', '-m', 'venv', venvDir])
  call(['{}/bin/python'.format(venvDir), '-m', 'pip', 'install',
    '--upgrade', 'pip', 'setuptools', 'wheel'])

  reqFile = 'requirements.txt'

  if not path.exists(reqFile):
    print('No {} found'.format(reqFile))
  elif noReq:
    print('Installation of requirements not desired')
  else:
    call(['{}/bin/pip'.format(venvDir), 'install', '-r', reqFile])


def mkGitignore(venvDir, noGitignore):
  gitIgnoreFile = '.gitignore'

  if path.exists(gitIgnoreFile):
    print('{} already exists, not creating'.format(gitIgnoreFile))
  elif noGitignore:
    print('No {} desired, not creating'.format(gitIgnoreFile))
  else:
    with open(gitIgnoreFile, 'w') as f:
      f.write('{}\n'.format(venvDir))
    print('{} created'.format(gitIgnoreFile))


def main():
  args = parseArgs()

  if args.displayVersion:
    print("{} {}".format(argv[0], version))
  else:
    prepDirectory(args.projectDir)
    mkVirtEnv(args.venvDir, args.noReq)
    mkGitignore(args.venvDir, args.noGitignore)
    print("\nVirtual environment is ready for project in directory {}".format(args.projectDir))


if __name__ == '__main__': main()
