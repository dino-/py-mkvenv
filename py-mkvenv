#! /usr/bin/env python3

from os import (chdir, getcwd, makedirs, path)
from subprocess import call
import sys
from typing import Callable

sys.path.insert(0, 'lib')

from pymkvenv.opts import (Args, parseArgs, VERSION)


# Execute a function only if we can chdir into the supplied directory first.
# Restoring the working directory afterwards.
def withDirectory(directory: str, f: Callable[[], None]) -> None:
  cwd = getcwd()

  try:
    chdir(directory)
    f()
  finally:
    chdir(cwd)


def prepDirectory(projectDir: str) -> None:
  if not path.exists(projectDir):
    makedirs(projectDir)


def mkVirtEnv(venvDir: str, noReq: bool) -> Callable[[], None]:
  def f() -> None:
    call(['python3', '-m', 'venv', venvDir])
    call([f'{venvDir}/bin/python', '-m', 'pip', 'install',
      '--upgrade', 'pip', 'setuptools', 'wheel'])

    reqFile = 'requirements.txt'

    if not path.exists(reqFile):
      print(f'No {reqFile} found')
    elif noReq:
      print('Installation of requirements not desired')
    else:
      call([f'{venvDir}/bin/pip', 'install', '-r', reqFile])

  return f


def mkGitignore(venvDir: str, noGitignore: bool) -> Callable[[], None]:
  def f() -> None:
    gitIgnoreFile = '.gitignore'

    if path.exists(gitIgnoreFile):
      print(f'{gitIgnoreFile} already exists, not creating')
    elif noGitignore:
      print(f'No {gitIgnoreFile} desired, not creating')
    else:
      with open(gitIgnoreFile, 'w') as f:
        f.write(f'{venvDir}\n')
      print(f'{gitIgnoreFile} created')

  return f


def main() -> None:
  args = parseArgs()

  if args.displayVersion:
    print(f"{sys.argv[0]} {VERSION()}")
  else:
    prepDirectory(args.projectDir)
    withDirectory(args.projectDir, mkVirtEnv(args.venvDir, args.noReq))
    withDirectory(args.projectDir, mkGitignore(args.venvDir, args.noGitignore))

    print(f"\nThe virtual environment is ready for the project in directory {args.projectDir}")
    print("To start using it, type: `. ./.venv/bin/activate` from within that directory")


if __name__ == '__main__': main()
